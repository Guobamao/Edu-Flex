<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.eduflex.manage.mapper.StudentMapper">
    
    <resultMap type="Student" id="StudentResult">
        <result property="id"    column="id"    />
        <result property="userId"    column="user_id"    />
        <result property="collegeId"    column="college_id"    />
        <result property="gradeId"    column="grade_id"    />
        <result property="userName" column="user_name" />
        <result property="nickName"    column="nick_name"    />
        <result property="email"    column="email"    />
        <result property="phonenumber"    column="phonenumber"    />
        <result property="sex"    column="sex"    />
        <result property="avatar"    column="avatar"    />
        <result property="password"    column="password"    />
        <result property="status"    column="status"    />
        <result property="loginIp" column="login_ip"    />
        <result property="loginDate" column="login_date" />
        <result property="createBy" column="create_by" />
        <result property="createTime" column="create_time" />
        <result property="updateBy" column="update_by" />
        <result property="updateTime" column="update_time" />
        <result property="remark" column="remark" />
    </resultMap>

    <sql id="selectStudentVo">
        select s.*, u.user_name, u.nick_name, u.email, u.phonenumber, u.sex, u.avatar, u.status, u.login_ip, u.login_date
        from tb_student s
        left join sys_user u on s.user_id = u.user_id
    </sql>

    <select id="selectStudentList" parameterType="Student" resultMap="StudentResult">
        <include refid="selectStudentVo"/>
        <where>  
            <if test="collegeId != null "> and college_id = #{collegeId}</if>
            <if test="gradeId != null "> and grade_id = #{gradeId}</if>
            <if test="userName != null"> and user_name like concat('%', #{userName}, '%')</if>
            <if test="nickName != null"> and nick_name like concat('%', #{nickName}, '%')</if>
            <if test="phonenumber != null"> and phonenumber like concat('%', #{phonenumber}, '%')</if>
        </where>
    </select>
    
    <select id="selectStudentById" parameterType="Long" resultMap="StudentResult">
        <include refid="selectStudentVo"/>
        where id = #{id}
    </select>
    <select id="selectUserIdsByStudentIds">
        select user_id from tb_student where id in
        <foreach item="id" collection="array" open="(" separator="," close=")">
            #{id}
        </foreach>
    </select>

    <insert id="insertStudent" parameterType="Student" useGeneratedKeys="true" keyProperty="id">
        insert into tb_student
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="userId != null">user_id,</if>
            <if test="collegeId != null">college_id,</if>
            <if test="gradeId != null">grade_id,</if>
         </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="userId != null">#{userId},</if>
            <if test="collegeId != null">#{collegeId},</if>
            <if test="gradeId != null">#{gradeId},</if>
         </trim>
    </insert>

    <update id="updateStudent" parameterType="Student">
        update tb_student
        <trim prefix="SET" suffixOverrides=",">
            <if test="userId != null">user_id = #{userId},</if>
            <if test="collegeId != null">college_id = #{collegeId},</if>
            <if test="gradeId != null">grade_id = #{gradeId},</if>
        </trim>
        where id = #{id}
    </update>

    <delete id="deleteStudentById" parameterType="Long">
        delete from tb_student where id = #{id}
    </delete>

    <delete id="deleteStudentByIds" parameterType="String">
        delete from tb_student where id in 
        <foreach item="id" collection="array" open="(" separator="," close=")">
            #{id}
        </foreach>
    </delete>
</mapper>